library(dplyr)
library(Seurat)
library(patchwork)
library(Matrix)
library(ggpubr)
library(ggplot2)

####################### Aldinger #######################
# Create object
cbl <- readRDS("/home/cancer/rna_seq_mb/cbl_integrated_cleanCC_200518.rds")

# Set the default assay
DefaultAssay(cbl) <- "RNA"

# Perform quality control (QC)
cbl$percent.mt[is.na(cbl$percent.mt)] <- 0

# Visualize QC metrics as a violin plot
aldinger.qc.metrics <- VlnPlot(cbl, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
ggsave(aldinger.qc.metrics, height = 14, width = 21, file="~/SeuratProject/Aldinger data analysis/Basic Seurat/Aldinger_QC_Metrics.png")

# Feature scatter to visualize feature-feature relationships
plot1 <- FeatureScatter(cbl, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(cbl, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
aldinger.feature.relationships <- plot1 + plot2
ggsave(aldinger.feature.relationships, height = 14, width = 21, file="~/SeuratProject/Aldinger data analysis/Basic Seurat/Aldinger_nFeature_nCount.png")

# Set cutoff parameters
cbl <- subset(cbl, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 10)

# Normalise data
cbl <- NormalizeData(cbl)

# Find highly variable features
cbl <- FindVariableFeatures(cbl, selection.method = "vst", nfeatures = 2000)

      # Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(cbl), 10)

      # Plot variable features with and without labels
plot1l <- VariableFeaturePlot(cbl) + theme_classic()
plot2l <- LabelPoints(plot = plot1l, points = top10, repel = TRUE, xnudge = 0, ynudge = 0) + theme_classic()
plot1plot2  <- plot_grid(plot1,plot2, nrow=1)
ggsave(plot1+plot2, height = 10, width = 14, file="~/SeuratProject/Aldinger data analysis/Basic Seurat/Aldinger_VariableFeatures.png") + theme_bw()

# Scale data prior to performing dimensionality reduction
cbl <- ScaleData(cbl)

# Perform linear dimensional reduction
cbl <- RunPCA(cbl, features = VariableFeatures(object = cbl))
print(cbl[["pca"]], dims = 1:5, nfeatures = 5)

      # Visualise PCA
        # VizDimLoadings
aldinger_vizdimloadings <- VizDimLoadings(cbl, dims = 1:2, reduction = "pca")
ggsave(aldinger_vizdimloadings, height = 8, width = 10, file="~/SeuratProject/Aldinger data analysis/Basic Seurat/Aldinger_Vizdimloadings.png")

        # DimPlot
aldinger_pca <- DimPlot(cbl, reduction = "pca")
ggsave(aldinger_pca, height = 10, width = 11, file="~/SeuratProject/Aldinger data analysis/Basic Seurat/Aldinger_PCA.png")

        # DimHeatmap
DimHeatmap(cbl, dims = 1, cells = 500, balanced = TRUE)
png(file="~/SeuratProject/Aldinger data analysis/Basic Seurat/Aldinger_PCAHeatmap.png", height = 20, width = 20, units = "cm", res = 300)
DimHeatmap(cbl, dims = 1:9, cells = 500, balanced = TRUE)
dev.off()
graphics.off()

### Determine the ‘dimensionality’ of the dataset
cbl <- JackStraw(cbl, num.replicate = 100)
cbl <- ScoreJackStraw(cbl, dims = 1:20)
aldinger_jackstraw <- JackStrawPlot(cbl, dims = 1:15)
ggsave(aldinger_jackstraw, file="~/SeuratProject/Aldinger data analysis/Basic Seurat/Aldinger_JackStraw.png")

aldinger_elbowplot <- ElbowPlot(cbl) + theme_classic() 
ggsave(aldinger_elbowplot, height=7, width=8,file="~/SeuratProject/Aldinger data analysis/Basic Seurat/Aldinger_ElbowPlot.png")
ggsave(filename = "~/SeuratProject/Aldinger data analysis/Basic Seurat/Aldinger_ElbowPlot.png", plot = aldinger_elbowplot, dpi = 300) 

### Cluster the cells
cbl <- FindNeighbors(cbl, dims = 1:10)
cbl <- FindClusters(cbl, resolution = 0.5)
# Look at cluster IDs of the first 5 cells
head(Idents(cbl), 5)

# Perform non-linear dimensional reduction
cbl <- RunUMAP(cbl, dims = 1:10)
aldinger_dimplot <- DimPlot(cbl, reduction = "umap")
ggsave(aldinger_dimplot, width = 10, height = 11, file="~/SeuratProject/Aldinger data analysis/Basic Seurat/Aldinger_DimPlot_UMAP.png")

p1 <- DimPlot(cbl, reduction = "umap", group.by = "figure_clusters")
p2 <- DimPlot(cbl, reduction = "umap", group.by="seurat_clusters")
aldinger_umap <- p1+p2
ggsave(aldinger_umap, width = 23, height = 11, file="~/SeuratProject/Aldinger data analysis/Basic Seurat/Aldinger_UMAP.png")

##### SAVE THE OBJECTS ######
library(cowplot)
grid_aldinger_qc <- plot_grid(aldinger.qc.metrics, aldinger.feature.relationships,plot1l,plot2l, labels=c("a","b","c"," "), nrow=2)
ggsave(grid_aldinger_qc, height=12,width=27,file="~/SeuratProject/Aldinger data analysis/Basic Seurat/grid_aldinger_qc.png")

grid_aldinger_dimreduct <- plot_grid(aldinger_vizdimloadings,aldinger_pca,aldinger_elbowplot,aldinger_umap,labels=c("a","b","c","d"),nrow=2, rel_widths = c(1,2))
ggsave(grid_aldinger_dimreduct, height=12,width=24,file="~/SeuratProject/Aldinger data analysis/Basic Seurat/grid_aldinger_dimreduct.png")

############# NEW SUBSET ##############
# List names of all clusters
levels(cbl$figure_clusters)

# Create an object of chosen cluster names
cbl.clusters.of.interest <- c("02-RL","03-GCP","04-GN","05-eCN/UBC")

### subset the columns of this large seurat object to give only the cluster we want
subset.cbl <- cbl[,cbl$figure_clusters%in%cbl.clusters.of.interest]

# Examine PCA for the new subset
subset.cbl <- RunPCA(subset.cbl, features = VariableFeatures(object = subset.cbl))
print(subset.cbl[["pca"]], dims = 1:5, nfeatures = 5)

### Visualize PCA results
aldinger_subset_vizdimloadings <- VizDimLoadings(subset.cbl, dims = 1:2, reduction = "pca")
ggsave(aldinger_subset_vizdimloadings, width=9, height=9, file="~/SeuratProject/Aldinger data analysis/Subset/Aldinger_Subset_Vizdimloadings.png")

aldinger_subset_pca_dimplot <- DimPlot(subset.cbl, reduction = "pca", group.by = "figure_clusters")
ggsave(aldinger_subset_pca_dimplot, width=9,height=9,file="~/SeuratProject/Aldinger data analysis/Subset/Aldinger_Subset_PCA_Dimplot.png")

aldinger_subset_heatmap <- DimHeatmap(subset.cbl, dims = 1:9, cells = 500, balanced = TRUE)
ggsave(aldinger_subset_heatmap, height=20,width=15,file="~/SeuratProject/Aldinger data analysis/Subset/Aldinger_Subset_HeatMap.jpg")

png(file="~/SeuratProject/Aldinger data analysis/Subset/Aldinger_Subset_Heatmap.png", height = 20, width = 20, units = "cm", res = 300)
DimHeatmap(subset.cbl, dims = 1:9, cells = 500, balanced = TRUE)
dev.off()
graphics.off()

aldinger_elbowplot <- ElbowPlot(subset.cbl) + theme_classic()
ggsave(aldinger_elbowplot, width=9, height=9, file="~/SeuratProject/Aldinger data analysis/Subset/Aldinger_Subset_Elbowplot.png")

subset.cbl <- JackStraw(subset.cbl, num.replicate = 100)
subset.cbl <- ScoreJackStraw(subset.cbl, dims = 1:20)

#### Recalculate the UMAP with the subset and also recalculate the clusters and the PCA and the variable genes...

subset.cbl <- RunUMAP(subset.cbl, dims = 1:10)
Aldinger_subset_umap_dimplot <- DimPlot(subset.cbl, reduction = "umap", label = TRUE, group.by = "figure_clusters")
ggsave(Aldinger_subset_umap_dimplot, height = 9, width = 12, file="~/SeuratProject/Aldinger data analysis/Subset/Aldinger_Subset_UMAP.png")

p1 <- DimPlot(subset.cbl, reduction = "umap", group.by = "figure_clusters")
p2 <- DimPlot(subset.cbl, reduction = "umap", group.by="seurat_clusters")
Aldinger_subset_umap_dimplot <- p1+p2
ggsave(Aldinger_subset_umap_dimplot, width = 23, height = 11, file="~/SeuratProject/Aldinger data analysis/Subset/Aldinger_UMAP.png")

# Find variable features
subset.cbl <- FindVariableFeatures(subset.cbl, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(subset.cbl), 10)

# Plot variable features with and without labels
plot1l <- VariableFeaturePlot(subset.cbl) + theme_bw()
plot2l <- LabelPoints(plot = plot1, points = top10, repel = TRUE, xnudge = 0, ynudge = 0) + theme_bw()
plot1plot2  <- plot_grid(plot1,plot2, nrow=1)
ggsave(plot1+plot2, height = 10, width = 14, file="~/SeuratProject/Aldinger data analysis/Basic Seurat/Aldinger_VariableFeatures.png") + theme_bw()

### make a new clustering and directly compare your clustering with the Lu paper clustering
subset.cbl <- FindNeighbors(subset.cbl, dims = 1:15)
subset.cbl <- FindClusters(subset.cbl, resolution = 0.5)
View(subset.cbl)

##### Ident(subset.cbl) will be the new clustering that you made
View(subset.cbl$figure_clusters)
head(Idents(subset.cbl), 5)

##### SAVE ALL OBJECTS ######
grid_aldinger_subset_dimreduct <- plot_grid(aldinger_subset_vizdimloadings,aldinger_subset_pca_dimplot,aldinger_elbowplot,Aldinger_subset_umap_dimplot,labels=c("a","b","c","d"),nrow=2, rel_widths = c(1,2))
ggsave(grid_aldinger_subset_dimreduct, height=12,width=24,file="~/SeuratProject/Aldinger data analysis/Subset/grid_aldinger_subset_dimreduct.png")

### subset.cbl$figure_clusters is the name of there clustering
### you can use the function table(a,b) to create a comparison table
### prop.table(a,b)

table(Idents(subset.cbl), subset.cbl$figure_clusters)
prop.table(table(Idents(subset.cbl), (subset.cbl$figure_clusters)), 2) -> proport

library("pheatmap")

pheatmap(proport, cluster_rows = F, cluster_cols = F, scale = "none")

saveRDS(subset.cbl, file = "/home/raisaa/SeuratProject/Aldinger data analysis/Subset/subset.cbl.rds")
subset.cbl <- readRDS(file="/home/raisaa/SeuratProject/Aldinger data analysis/Subset/subset.cbl.rds")

subset.cbl@meta.data[, "protocol"] <- "aldinger.data"

#################### PROJECTION ####################
# Extract the values for the projection
subset.cbl <- readRDS("/home/raisaa/SeuratProject/Aldinger data analysis/Subset/subset.cbl.rds")

# Set the default assay for this subset of cells to RNA
DefaultAssay(object = subset.cbl) <- "RNA"

# Extract the normalised count data
tpms.mat <- subset.cbl[["RNA"]]@scale.data

# install and load libraries
library("NMF")
library("MASS")

# load required data objects
nmf.res <- readRDS(file = "/home/raisaa/Group3-4App-main/StarProtocols_Guide/data/nmf.res.rds")

# load sample data as matrix object
source(file = "/home/raisaa/Group3-4App-main/StarProtocols_Guide/R/Project_NMF.R")

# project NMF model to sequencing data
tpms.mat <- project.NMF(input.array = as.matrix(tpms.mat), nmf.result = nmf.res)

# rows 3 and 1 in tpms.mat correspond to the Groups 3 and 4 metagenes, extract them from the data and transpose matrix
g3g4.tpms <- t(tpms.mat[c(3,1),]) 

# apply logistic transformation to metagenes
logistic.g3g4.tpms <- apply(g3g4.tpms,2,function(x){(1 / (1 + exp(-x)))}) 
logistic.g3g4.tpms.score <- apply(logistic.g3g4.tpms,1,function(x){x[2]/(x[1]+x[2])})

# scale values between 0 to 1
logistic.g3g4.tpms.continuum.score <- (logistic.g3g4.tpms.score-min(logistic.g3g4.tpms.score)) / (max(logistic.g3g4.tpms.score)-min(logistic.g3g4.tpms.score))
logistic.g3g4.tpms.continuum.score <- logistic.g3g4.tpms.score

# present output as data frame for export
logistic.g3g4.tpms.continuum.score <- as.data.frame(logistic.g3g4.tpms.continuum.score)
colnames(logistic.g3g4.tpms.continuum.score) <- "Continuum Score"
data.frame(logistic.g3g4.tpms.continuum.score)

# projected results, map them back onto the seurat object
logistic.g3g4.tpms.continuum.score -> subset.cbl$logistic.g3g4.tpms.continuum.score

# the projected results are now mapped back onto the original object
View(logistic.g3g4.tpms.continuum.score)

as.numeric(tpms.mat[1,]) -> subset.cbl$group3_metagene
as.numeric(tpms.mat[3,]) -> subset.cbl$group4_metagene
as.numeric(tpms.mat[4,]) -> subset.cbl$shh_metagene
as.numeric(tpms.mat[2,]) -> subset.cbl$wnt_metagene
logistic.g3g4.tpms.continuum.score -> subset.cbl$g3g4.score

aldinger_gr4_violinplot_cluster.names <- VlnPlot(subset.cbl, features = "group4_metagene", group.by = "figure_clusters")
aldinger_gr3_violinplot_cluster.names <- VlnPlot(subset.cbl, features = "group3_metagene" ,group.by = "figure_clusters")
aldinger_shh_violinplot_cluster.names <- VlnPlot(subset.cbl, features = "shh_metagene" ,group.by = "figure_clusters")
aldinger_wnt_violinplot_cluster.names <- VlnPlot(subset.cbl, features = "wnt_metagene" ,group.by = "figure_clusters")
aldinger_wnt_violinplot <- VlnPlot(subset.cbl, features = "wnt_metagene")
aldinger_shh_violinplot <- VlnPlot(subset.cbl, features = "shh_metagene")
aldinger_gr3_violinplot <- VlnPlot(subset.cbl, features = "group3_metagene")
aldinger_gr4_violinplot <- VlnPlot(subset.cbl, features = "group4_metagene")

ggsave(aldinger_gr4_violinplot_cluster.names, width = 10, height = 11, file="~/SeuratProject/Aldinger data analysis/Metagene projection/Aldinger_Group4Projection_VP.png")
ggsave(aldinger_gr3_violinplot_cluster.names, width = 10, height = 11, file="~/SeuratProject/Aldinger data analysis/Metagene projection/Aldinger_Group3Projection_VP.png")
ggsave(aldinger_shh_violinplot_cluster.names, width = 10, height = 11, file="~/SeuratProject/Aldinger data analysis/Metagene projection/Aldinger_ShhProjection_VP.png")
ggsave(aldinger_wnt_violinplot_cluster.names, width = 10, height = 11, file="~/SeuratProject/Aldinger data analysis/Metagene projection/Aldinger_WntProjection_VP.png")

grid_aldinger_vp_projection <- plot_grid(aldinger_gr3_violinplot_cluster.names,aldinger_gr4_violinplot_cluster.names,
                                         aldinger_shh_violinplot_cluster.names,aldinger_wnt_violinplot_cluster.names, labels=c("f", "g","h","i"), ncol = 2, nrow = 2)
ggsave(grid_aldinger_vp_projection, height = 12, width = 16, 
       file="~/SeuratProject/Aldinger data analysis/Metagene projection/Grid_VP_Projection.png") 

# Draw some dimplots that show the clusters, the metagene and the g3g4 
aldinger.dimplot.figure.clusters <- DimPlot(object = subset.cbl, group.by = "figure_clusters")
aldinger_gr4_featureplot <- FeaturePlot(object = subset.cbl,  "group4_metagene", cols = c("grey","green"), min.cutoff = 0)
aldinger_gr3_featureplot <- FeaturePlot(object = subset.cbl, "group3_metagene", cols = c("grey","yellow"), min.cutoff = 0)
aldinger_shh_featureplot <- FeaturePlot(object = subset.cbl, "shh_metagene", cols = c("grey","red"),min.cutoff=0) 
aldinger_wnt_featureplot <- FeaturePlot(object = subset.cbl, "wnt_metagene", cols = c("grey","blue"), min.cutoff=0)

library(cowplot)
plot_grid(aldinger_gr3_featureplot,
          aldinger_gr4_featureplot,
          aldinger_shh_featureplot,
          aldinger_wnt_featureplot,
          nrow = 2, labels = c("b","c","d","e")
) -> aldinger.dimplot.fp

plot_grid(aldinger.dimplot.figure.clusters,
          aldinger.dimplot.fp,
          nrow = 2, 
          labels = c("a"," ")) -> aldinger.dimplot.all

plot_grid(aldinger.dimplot.all,grid_aldinger_vp_projection) -> final.aldinger.dimplot.all

ggsave(aldinger.dimplot.all, height = 14, width = 12, 
       file="~/SeuratProject/Aldinger data analysis/Metagene projection/Grid_Aldinger_Projection.png") 

ggsave(final.aldinger.dimplot.all, height=14,width=22,file="~/SeuratProject/Aldinger data analysis/Metagene projection/Grid_Aldinger_Projection.VPFP.png")

ggsave(aldinger_gr4_featureplot, width = 10, height = 11, file="~/SeuratProject/Aldinger data analysis/Metagene projection/Aldinger_Group4Projection_FP.png")
ggsave(aldinger_gr3_featureplot, width = 10, height = 11, file="~/SeuratProject/Aldinger data analysis/Metagene projection/Aldinger_Group3Projection_FP.png")
ggsave(aldinger_shh_featureplot, width = 10, height = 11, file="~/SeuratProject/Aldinger data analysis/Metagene projection/Aldinger_ShhProjection_FP.png")
ggsave(aldinger_wnt_featureplot, width = 10, height = 11, file="~/SeuratProject/Aldinger data analysis/Metagene projection/Aldinger_WntProjection_FP.png")
ggsave(aldinger.dimplot.figure.clusters, width = 10, height = 11, file="~/SeuratProject/Aldinger data analysis/Metagene projection/Aldinger_DimplotProjection.png")
ggsave(aldinger.dimplot.all, width = 12, height = 11, file="~/SeuratProject/Aldinger data analysis/Metagene projection/Aldinger_Projection.png")

##### ALDINGER TRAJECTORY ANALYSIS #####
library(dplyr)
library(Seurat)
library(patchwork)
library(R.utils)
library(ggplot2)
library(monocle3)
library(ggplot2)
library(SeuratWrappers)

subset.cbl <- readRDS("/home/raisaa/SeuratProject/Aldinger data analysis/Subset/subset.cbl.rds")

# Convert Seurat object as cell data set (cds)
cds_aldinger <- as.cell_data_set(subset.cbl)

cds_aldinger@rowRanges@elementMetadata@listData[["gene_short_name"]] <- rownames(subset.cbl[["RNA"]])

# Preprocess CDS data
cds_aldinger <- preprocess_cds(cds_aldinger, num_dim = 50)

# Align CDS data
cds_aldinger <- align_cds(cds_aldinger)

# Reduce data dimension
cds_aldinger <- reduce_dimension(cds_aldinger)

# Cluster cells
cds_aldinger <- cluster_cells(cds_aldinger)

# Plot before trajectory
aldinger.before.trajectory <- plot_cells(cds_aldinger, show_trajectory_graph = FALSE,
                                         color_cells_by = "cluster", label_groups_by_cluster = TRUE, group_label_size = 4, force(T)) +
  theme(legend.position = "right")

ggsave(aldinger.before.trajectory, height = 7, width = 9, 
       file="~/SeuratProject/Aldinger data analysis/Trajectory Analysis using Monocle3/Aldinger_Before_Trajectory.png")

# See partition
plot_cells(cds_aldinger, color_cells_by = "partition")

# Plot learn graph
cds_aldinger <- learn_graph(cds_aldinger, use_partition = F)

# Plot order graph
cds_aldinger <- order_cells(cds_aldinger)

# Plot clustering after trajectory
aldinger.after.trajectory <- plot_cells(cds_aldinger,
                                        color_cells_by = 'cluster',
                                        label_groups_by_cluster = FALSE,
                                        label_branch_points = FALSE,
                                        label_roots = FALSE,
                                        label_leaves = FALSE,
)  + theme(legend.position = "right")

ggsave(aldinger.after.trajectory, height = 7, width = 9, 
       file="~/SeuratProject/Aldinger data analysis/Trajectory Analysis using Monocle3/Aldinger_After_Trajectory.png")

# Plot clusters trajectory
aldinger.clusters.trajectory <- plot_cells(cds_aldinger,
                                           color_cells_by = 'figure_clusters',
                                           label_groups_by_cluster = FALSE,
                                           label_branch_points = FALSE,
                                           label_roots = FALSE,
                                           label_leaves = FALSE,
                                           group_label_size = 4,
)  + theme(legend.position = "right")

ggsave(aldinger.clusters.trajectory, height = 7, width = 9, 
       file="~/SeuratProject/Aldinger data analysis/Trajectory Analysis using Monocle3/Aldinger.Clusters.Trajectory.png")

# Pseudotime
Aldinger_Pseudotime_Trajectory <- plot_cells(cds_aldinger,
                                             color_cells_by = 'pseudotime',
                                             label_groups_by_cluster = FALSE,
                                             label_branch_points = FALSE,
                                             label_roots = FALSE,
                                             label_leaves = FALSE)

ggsave(Aldinger_Pseudotime_Trajectory, height = 7, width = 9, 
       file="~/SeuratProject/Aldinger data analysis/Trajectory Analysis using Monocle3/Aldinger_Pseudotime.png")

# find genes that change in function of pseudotime
deg_aldinger<- graph_test(cds_aldinger, neighbor_graph = 'principal_graph', cores = 4)

deg_aldinger %>% 
  arrange(q_value) %>% 
  filter(status == 'OK') %>% 
  head()

genes <- c('MT-RNR2', 'LSAMP', 'DSCAML1')
plot_cells(cds_aldinger,genes=genes,label_cell_groups=FALSE,show_trajectory_graph=FALSE)

# plot_cells to visualize marker genes expression
# 02-RL marker genes
    # from the top 10 RL markers, only RSPO3 and DPYD are highest in both RL and eCNs/UBCs. the rest are confined to RL only 
      # "OTX2","MKI67","LMX1A","EOMES" are RL, eCN-UBC markers stated by Aldinger (exc.MKI67). 
        # aldinger said as RL differentiate to eCNs/ UBCs, their gene expression decline, not sure if true
aldinger.02RL.genes <- c("RSPO1", "WNT2B", "OLIG3", "SLFN13", "CALCB", "CALCA","ATP6V1C2","RSPO3","DPYD","NEUROG1",
                         "OTX2","MKI67","LMX1A","EOMES","PAX6","WLS")
aldinger.02RL.genes.only <- c("RSPO1", "WNT2B", "OLIG3", "SLFN13", "CALCB", "CALCA","ATP6V1C2","NEUROG1")
aldinger_02RL_genes <- plot_cells(cds_aldinger,genes=aldinger.02RL.genes,label_cell_groups=FALSE,show_trajectory_graph=FALSE)
aldinger_02RL_genes_only <- plot_cells(cds_aldinger,genes=aldinger.02RL.genes.only,label_cell_groups=FALSE,show_trajectory_graph=FALSE)

ggsave(aldinger_02RL_genes, height = 7, width = 9, 
       file="~/SeuratProject/Aldinger data analysis/Trajectory Analysis using Monocle3/MarkerGenes_02RL.png")
ggsave(aldinger_02RL_genes_only, height = 7, width = 9, 
       file="~/SeuratProject/Aldinger data analysis/Trajectory Analysis using Monocle3/MarkerGenes_02RL_Only.png")

      # note: OLIG3, RSPO3 and SLFN13 are expressed throughout the RL, 
      # whereas WNT2B, CALCB, ATP6V1C2 and CALCA -> RLVZ, and DPYD -> RLSVZ.

# 03-GCP marker genes. 
    #as GCP -> GN, MKI67 and DCC in GCP declines, with an increase of RELN and RBFOX3.
aldinger.03GCP.genes <- c("PAX6","RBFOX3","PTPRK","MKI67","DCC","RELN")
aldinger_03GCP_genes <- plot_cells(cds_aldinger,genes=aldinger.03GCP.genes,label_cell_groups=FALSE,show_trajectory_graph=FALSE)

ggsave(aldinger_03GCP_genes, height = 7, width = 9, 
       file="~/SeuratProject/Aldinger data analysis/Trajectory Analysis using Monocle3/MarkerGenes_03GCP.png")

# 04-GN marker genes. *DOES NOT EXPRESS MKI67*
aldinger.04GN.genes <- c("RBFOX3","PTPRK","RELN","MKI67")
aldinger_04GN_genes <- plot_cells(cds_aldinger,genes=aldinger.04GN.genes,label_cell_groups=FALSE,show_trajectory_graph=FALSE)

ggsave(aldinger_04GN_genes, height = 7, width = 9, 
       file="~/SeuratProject/Aldinger data analysis/Trajectory Analysis using Monocle3/MarkerGenes_04GN.png")

# 05-eCN-UBC *DOES NOT EXPRESS MKI67*
  # eCNs express LMX1A but not EOMES, UBCs express both LMX1A and EOMES. Aldingers paper was unable to discriminate eCNs and UBCs.
aldinger.05eCNUBC.genes <- c("PAX6", "LMX1A","EOMES","MKI67")
aldinger_05eCNUBC_genes <- plot_cells(cds_aldinger,genes=aldinger.05eCNUBC.genes,label_cell_groups=FALSE,show_trajectory_graph=FALSE)

ggsave(aldinger_05eCNUBC_genes, height = 7, width = 9, 
       file="~/SeuratProject/Aldinger data analysis/Trajectory Analysis using Monocle3/MarkerGenes_05eCNUBC.png")

# Save the final plots 
library(cowplot)
grid_aldinger_trajectory <- plot_grid(aldinger.clusters.trajectory,Aldinger_Pseudotime_Trajectory, labels=c("a","b"),nrow = 1)
ggsave(grid_aldinger_trajectory, height = 6, width = 16, 
       file="~/SeuratProject/Aldinger data analysis/Trajectory Analysis using Monocle3/Grid_Aldinger_Trajectory.png") 

grid_aldinger_trajectory_markers <- plot_grid(aldinger_02RL_genes, aldinger_03GCP_genes, aldinger_04GN_genes, aldinger_05eCNUBC_genes, labels=c("c", "d","e","f"), ncol = 2, nrow = 2)
ggsave(grid_aldinger_trajectory_markers, height = 10, width = 14, 
       file="~/SeuratProject/Aldinger data analysis/Trajectory Analysis using Monocle3/Grid_Aldinger_Trajectory_Markers.png") 

grid_aldinger_trajectory_all <- plot_grid(grid_aldinger_trajectory,grid_aldinger_trajectory_markers,labels = c(" "," "),nrow=2,rel_heights=c(1,2))
ggsave(grid_aldinger_trajectory_all, height = 12, width = 13, 
       file="~/SeuratProject/Aldinger data analysis/Trajectory Analysis using Monocle3/Grid_Aldinger_Trajectory_ALL.png") 

# Project metagene to trajectory plot
meta.g4 <- plot_cells(cds_aldinger,
                      color_cells_by = "group4_metagene",
                      label_cell_groups=FALSE,
                      label_leaves=FALSE,
                      label_branch_points=FALSE,
                      graph_label_size=1.5,
                      cell_stroke = 0.1,
                      scale_to_range = F, cell_size = 1, alpha = 0.1) + 
  scale_colour_gradient2(
    low = "white",
    mid = "white",
    high = "green",
    midpoint = 0.1,
    space = "Lab",
    na.value = "grey50",
    guide = "colourbar",
    aesthetics = "colour"
  )

meta.g3 <- plot_cells(cds_aldinger,
                      color_cells_by = "group3_metagene",
                      label_cell_groups=FALSE,
                      label_leaves=FALSE,
                      label_branch_points=FALSE,
                      graph_label_size=1.5,
                      cell_stroke = 0,
                      scale_to_range = F, cell_size = 2, alpha = 0.1) + 
  scale_colour_gradient2(
    low = "white",
    mid = "white",
    high = "yellow",
    midpoint = 0.1,
    space = "Lab",
    na.value = "grey50",
    guide = "colourbar",
    aesthetics = "colour"
  )

meta.shh <- plot_cells(cds_aldinger,
                       color_cells_by = "shh_metagene",
                       label_cell_groups=FALSE,
                       label_leaves=FALSE,
                       label_branch_points=FALSE,
                       graph_label_size=1.5,
                       cell_stroke = 0,
                       scale_to_range = F, cell_size = 2, alpha = 0.1) + 
  scale_colour_gradient2(
    low = "white",
    mid = "white",
    high = "red",
    midpoint = 0.1,
    space = "Lab",
    na.value = "grey50",
    guide = "colourbar",
    aesthetics = "colour"
  )

meta.wnt <- plot_cells(cds_aldinger,
                       color_cells_by = "wnt_metagene",
                       label_cell_groups=FALSE,
                       label_leaves=FALSE,
                       label_branch_points=FALSE,
                       graph_label_size=1.5,
                       cell_stroke = 0,
                       scale_to_range = F, cell_size = 2, alpha = 0.1) + 
  scale_colour_gradient2(
    low = "white",
    mid = "white",
    high = "blue",
    midpoint = 0.1,
    space = "Lab",
    na.value = "grey50",
    guide = "colourbar",
    aesthetics = "colour"
  )

metagenes <- plot_grid(meta.g3,meta.g4,meta.shh,meta.wnt, labels=c("j", "k","l","m"), ncol = 2, nrow = 2)
all_projection <- plot_grid(final.aldinger.dimplot.all,metagenes, labels = F, ncol = 2, nrow = 1, rel_widths = c(1.2,1))

ggsave(all_projection, height=15,width=33,file="~/SeuratProject/Aldinger data analysis/Metagene projection/Grid_Aldinger_Projection_And_Trajectory.VPFP.png")

