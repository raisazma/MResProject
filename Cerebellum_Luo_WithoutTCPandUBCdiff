library(dplyr)
library(Seurat)
library(patchwork)
library(R.utils)
library(ggplot2)

####################### Cerebellum data by Luo et al. excluding TCP and differentiated UBC #######################
# Create object
cerebellum.data <- readRDS("~/SeuratProject/Aldinger data analysis/GSM5952337_Fetal_cerebellum_F (1).rds")

# Read this to read in the finalised object without running the whole script
# saveRDS(subset.cerebellum.data3, file="~/SeuratProject/Lu data analysis/subset.cerebellum.data3.rds")
# subset.cerebellum.data3 <- readRDS(file="~/SeuratProject/Lu data analysis/subset.cerebellum.data3.rds")

# Set the default assay
DefaultAssay(cerebellum.data) <- "RNA"

# Perform quality control
cerebellum.data[["percent.mt"]] <- PercentageFeatureSet(cerebellum.data, pattern = "^MT-")

# Show QC metrics for the first 5 cells
head(cerebellum.data@meta.data, 5)

# Visualize QC metrics as a violin plot
lu.qc.metrics <- VlnPlot(cerebellum.data, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
ggsave(lu.qc.metrics, height = 14, width = 21, file="~/SeuratProject/Lu data analysis/Basic Seurat/Lu_QC_Metrics.png")

# Feature scatter to visualize feature-feature relationships
FeatureScatter(cerebellum.data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") + geom_smooth(method = 'lm')
plot1 <- FeatureScatter(cerebellum.data, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(cerebellum.data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
lu.featurerelationships <- plot1 + plot2 
ggsave(lu.featurerelationships, height = 14, width = 21, file="~/SeuratProject/Lu data analysis/Basic Seurat/Lu_nCount_nFeature_relationship.png")

# Set cutoff parameters
cerebellum.data <- subset(cerebellum.data, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 10)

# Normalise data
cerebellum.data <- NormalizeData(cerebellum.data)

# plot variable features with and without labels
cerebellum.data <- FindVariableFeatures(cerebellum.data, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(cerebellum.data), 10)

# plot variable features with and without labels
plot1lu <- VariableFeaturePlot(cerebellum.data) + theme_classic()
plot2lu <- LabelPoints(plot = plot1lu, points = top10, repel = TRUE, xnudge = 0,ynudge=0) + theme_classic()
plot1plot2 <- plot_grid(plot1lu,plot2lu,nrow=1)
ggsave(plot1lu+plot2lu, height = 10, width = 10, file="~/SeuratProject/Lu data analysis/Basic Seurat/Lu_VariableFeatures.png")

# Scale data prior to performing dimensionality reduction
cerebellum.data <- ScaleData(cerebellum.data)

# perform linear dimensional reduction
cerebellum.data <- RunPCA(cerebellum.data, features = VariableFeatures(object = cerebellum.data))

# Examine and visualize PCA results a few different ways
print(cerebellum.data[["pca"]], dims = 1:5, nfeatures = 5)

# Visualise PCA
# VizDimLoadings
lu_vizdimloadings <- VizDimLoadings(cerebellum.data, dims = 1:2, reduction = "pca")
ggsave(lu_vizdimloadings, height=8, width=10,file="~/SeuratProject/Lu data analysis/Basic Seurat/Lu_Vizdimloadings.png")

# DimPlot
lu_pca <- DimPlot(cerebellum.data, reduction = "pca")
ggsave(lu_pca, height=10,width=11,file="~/SeuratProject/Lu data analysis/Basic Seurat/Lu_PCA.png")

# Heatmap
png(file="~/SeuratProject/Lu data analysis/Basic Seurat/Lu_PCAHeatmap.png", height = 20, width = 20, units = "cm", res = 300)
DimHeatmap(cerebellum.data, dims = 1:9, cells = 500, balanced = TRUE)
dev.off()
graphics.off()

### Determine the ‘dimensionality’ of the dataset
cerebellum.data <- JackStraw(cerebellum.data, num.replicate = 100)
cerebellum.data <- ScoreJackStraw(cerebellum.data, dims = 1:20)
lu_jackstrawplot <- JackStrawPlot(cerebellum.data, dims = 1:15)
ggsave(lu_jackstrawplot, height=10,width=10,file="~/SeuratProject/Lu data analysis/Basic Seurat/Lu_JackstrawPlot.png")

lu_elbowplot <- ElbowPlot(cerebellum.data) + theme_classic()
ggsave(lu_elbowplot, height=7,width=8,file="~/SeuratProject/Lu data analysis/Basic Seurat/Lu_ElbowPlot.png")

# Cluster the cells
cerebellum.data <- FindNeighbors(cerebellum.data, dims = 1:15)
cerebellum.data <- FindClusters(cerebellum.data, resolution = 0.5)

# Look at cluster IDs of the first 5 cells
head(Idents(cerebellum.data), 5)

#### store the current clustering in a variable Idents(cerebellum.data) -> cerebellum.data$my_new_clustering

# Perform non-linear dimensional reduction
cerebellum.data <- RunUMAP(cerebellum.data, dims = 1:10)
p2 <- DimPlot(cerebellum.data, reduction = "umap", label = T, group.by="seurat_clusters")
p1 <- DimPlot(cerebellum.data, reduction = "umap", label = T, group.by = "cluster.names")
lu_umap <- p1+p2
ggsave(lu_umap, width = 23, height = 11, file="~/SeuratProject/Lu data analysis/Basic Seurat/Lu_UMAP.png")

############# SAVE OBJECTS ##############
library(cowplot)
grid_lu_qc <- plot_grid(lu.qc.metrics, lu.featurerelationships,plot1lu,plot2lu, labels=c("a","b","c"," "), nrow=2)
ggsave(grid_lu_qc, height=12,width=27,file="~/SeuratProject/Lu data analysis/Basic Seurat/grid_lu_qc.png")

grid_lu_dimreduction <- plot_grid(lu_vizdimloadings,lu_pca,lu_elbowplot,lu_umap,labels=c("a","b","c","d"), nrow=2,rel_widths = c(1,2))
ggsave(grid_lu_dimreduction, height=12,width=24,file="~/SeuratProject/Lu data analysis/Basic Seurat/grid_lu_dimreduction.png")

############# NEW SUBSET ##############
# List names of all clusters
levels(cerebellum.data$cluster.names)

# Create an object of chosen cluster names
cerebellum.clusters.of.interest3 <- c("01NSC", "06GCP_pro", "07GCP1","08GCP2","09Granule","11UBC","10UBC_PRO")

### subset the columns of this large seurat object to give only the cluster we want
subset.cerebellum.data3 <- cerebellum.data[,cerebellum.data$cluster.names%in%cerebellum.clusters.of.interest3]

# Set the default assay
DefaultAssay(subset.cerebellum.data3) <- "RNA"

# Perform quality control (QC)
subset.cerebellum.data3$percent.mt[is.na(subset.cerebellum.data3$percent.mt)] <- 0

# Visualize QC metrics as a violin plot
lu.subset.qc.metrics <- VlnPlot(subset.cerebellum.data3, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), group.by = "cluster.names", ncol=3, pt.size = 0)
lu.subset.qc.metrics1 <- VlnPlot(subset.cerebellum.data3, features = c("nFeature_RNA"), group.by = "cluster.names", pt.size = 0) + theme(legend.position = "none")
lu.subset.qc.metrics2 <- VlnPlot(subset.cerebellum.data3, features = c("nCount_RNA"), group.by = "cluster.names", pt.size = 0) + theme(legend.position = "none")
lu.subset.qc.metrics3 <- VlnPlot(subset.cerebellum.data3, features = c("percent.mt"), group.by = "cluster.names", pt.size = 0) +
  theme(
    legend.text = element_text(size = 20)
  )

ggsave(lu.subset.qc.metrics, height = 13, width = 19, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Lu_Subset_QC_Metrics.png")

# Feature scatter to visualize feature-feature relationships
plot1 <- FeatureScatter(subset.cerebellum.data3, feature1 = "nCount_RNA", feature2 = "percent.mt", group.by = "cluster.names") + theme(legend.position = "none")
plot2 <- FeatureScatter(subset.cerebellum.data3, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", group.by = "cluster.names") +
  theme(legend.text = element_text(size = 20))
lu.subset.feature.relationships <- plot1 + plot2
ggsave(lu.subset.feature.relationships, height = 14, width = 21, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Lu_Subset_nFeature_nCount.png")

# Set cutoff parameters
subset.cerebellum.data3 <- subset(subset.cerebellum.data3, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 10)

# Normalise data
subset.cerebellum.data3 <- NormalizeData(subset.cerebellum.data3)

# Find highly variable features
subset.cerebellum.data3 <- FindVariableFeatures(subset.cerebellum.data3, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(subset.cerebellum.data3), 10)

# Scale data prior to performing dimensionality reduction
subset.cerebellum.data3 <- ScaleData(subset.cerebellum.data3)

# Examine PCA for the new subset
subset.cerebellum.data3 <- RunPCA(subset.cerebellum.data3, features = VariableFeatures(object = subset.cerebellum.data3))
print(subset.cerebellum.data3[["pca"]], dims = 1:5, nfeatures = 5)

### Visualize PCA results
lu_subset_vizdimloadings <- VizDimLoadings(subset.cerebellum.data3, dims = 1:2, reduction = "pca")
ggsave(lu_subset_vizdimloadings, width=9, height=9, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Lu_Subset_Vizdimloadings.png")

lu_subset_pca_dimplot <- DimPlot(subset.cerebellum.data3, reduction = "pca", group.by = "cluster.names") +
  theme(
    legend.text = element_text(size = 20)
  )

ggsave(lu_subset_pca_dimplot, width=9,height=9,file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Lu_Subset_PCA_Dimplot.png")

lu_subset_heatmap <- DimHeatmap(subset.cerebellum.data3, dims = 1:9, cells = 500, balanced = TRUE)
ggsave(lu_subset_heatmap, height=20,width=15,file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Lu_Subset_HeatMap.jpg")

png(file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Lu_Subset_Heatmap.png", height = 20, width = 20, units = "cm", res = 300)
DimHeatmap(subset.cerebellum.data3, dims = 1:9, cells = 500, balanced = TRUE)
dev.off()
graphics.off()

lu_elbowplot <- ElbowPlot(subset.cerebellum.data3) + theme_classic()
ggsave(lu_elbowplot, width=9, height=9, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Lu_Subset_Elbowplot.png")

### make a new clustering and directly compare your clustering with the Lu paper clustering
subset.cerebellum.data3 <- FindNeighbors(subset.cerebellum.data3, dims = 1:15)
subset.cerebellum.data3 <- FindClusters(subset.cerebellum.data3, resolution = 0.5)

#### Recalculate the UMAP with the subset and also recalculate the clusters and the PCA and the variable genes...

subset.cerebellum.data3 <- RunUMAP(subset.cerebellum.data3, dims = 1:10)
lu_subset_umap_dimplot <- DimPlot(subset.cerebellum.data3, reduction = "umap", label = TRUE, group.by = "cluster.names")
ggsave(lu_subset_umap_dimplot, height = 9, width = 12, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Lu_Subset_UMAP.png")

p1 <- DimPlot(subset.cerebellum.data3, reduction = "umap", group.by = "cluster.names", label = T, label.size = 6) +
  theme(
    legend.text = element_text(size = 20)
  )
p2 <- DimPlot(subset.cerebellum.data3, reduction = "umap", group.by="seurat_clusters", label = T, label.size = 6) +
  theme(
    legend.text = element_text(size = 20)
  )

lu_subset_umap_dimplot <- p1+p2
ggsave(lu_subset_umap_dimplot, width = 23, height = 11, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Lu_Subset_UMAP.png")

# Find variable features
subset.cerebellum.data3 <- FindVariableFeatures(subset.cerebellum.data3, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(subset.cerebellum.data3), 10)

# Plot variable features with and without labels
plot1l <- VariableFeaturePlot(subset.cerebellum.data3) + theme_bw()
plot2l <- LabelPoints(plot = plot1, points = top10, repel = TRUE, xnudge = 0, ynudge = 0) + theme_bw()
plot1plot2  <- plot_grid(plot1,plot2, nrow=1)
ggsave(plot1+plot2, height = 10, width = 14, file="~/SeuratProject/Aldinger data analysis/Basic Seurat/Aldinger_VariableFeatures.png") + theme_bw()

##### Ident(subset.cerebellum.data3) will be the new clustering that you made
View(subset.cerebellum.data3$figure_clusters)
head(Idents(subset.cerebellum.data3), 5)

##### SAVE ALL OBJECTS ######
library(cowplot)
grid_lu_subset_qcmetrics <- plot_grid(lu.subset.qc.metrics1, lu.subset.qc.metrics2, lu.subset.qc.metrics3,labels=c("a"," "," "), nrow=1)

grid_lu_subset_dimreduct <- plot_grid(lu_elbowplot, lu_subset_pca_dimplot, labels=c("c","d"), nrow=1) 

grid_lu_subset_dimreduct2 <- plot_grid(p1,p2,labels=c("e","f"),nrow=1)

ggsave(grid_lu_subset_dimreduct, height=12,width=20,file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/grid_lu_subset_dimreduct.png")

grid_all_lu_subset <- plot_grid(grid_lu_subset_qcmetrics, lu.subset.feature.relationships, grid_lu_subset_dimreduct, grid_lu_subset_dimreduct2, labels=c(" ","b"," "," "),nrow = 4)

ggsave(grid_all_lu_subset, height=30, width=20, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/grid_all_lu_subset.png")

library("pheatmap")

pheatmap(proport, cluster_rows = F, cluster_cols = F, scale = "none")

subset.cerebellum.data3@meta.data[, "protocol3"] <- "lu.data3"

#################### Medulloblastoma metagene projection ####################
# Read the Seurat object
subset.cerebellum.data3 <- readRDS(file="/home/raisaa/SeuratProject/Lu data analysis/subset.cerebellum.data3.rds")

# Extract the values for the projection
DefaultAssay(object = subset.cerebellum.data3) <- "RNA"

# Extract the normalised count data
tpms.mat <- subset.cerebellum.data3[["RNA"]]@scale.data

# Install and load libraries
library("NMF")
library("MASS")

# Load required data objects
nmf.res <- readRDS(file = "/home/raisaa/Group3-4App-main/StarProtocols_Guide/data/nmf.res.rds")

# Load sample data as matrix object
source(file = "/home/raisaa/Group3-4App-main/StarProtocols_Guide/R/Project_NMF.R")

# Project NMF model to sequencing data
tpms.mat <- project.NMF(input.array = as.matrix(tpms.mat), nmf.result = nmf.res)

# Rows 3 and 1 in tpms.mat correspond to the Groups 3 and 4 metagenes, extract them from the data and transpose matrix
g3g4.tpms <- t(tpms.mat[c(3,1),]) 

# Apply logistic transformation to metagenes
logistic.g3g4.tpms <- apply(g3g4.tpms,2,function(x){(1 / (1 + exp(-x)))}) 
logistic.g3g4.tpms.score <- apply(logistic.g3g4.tpms,1,function(x){x[2]/(x[1]+x[2])})

# Scale values between 0 to 1 (continuum score)
logistic.g3g4.tpms.continuum.score <- (logistic.g3g4.tpms.score-min(logistic.g3g4.tpms.score)) / (max(logistic.g3g4.tpms.score)-min(logistic.g3g4.tpms.score))
logistic.g3g4.tpms.continuum.score <- logistic.g3g4.tpms.score

# Present output as data frame for export
logistic.g3g4.tpms.continuum.score <- as.data.frame(logistic.g3g4.tpms.continuum.score)
colnames(logistic.g3g4.tpms.continuum.score)
data.frame(logistic.g3g4.tpms.continuum.score)

# Projected results, map them back onto the seurat object
logistic.g3g4.tpms.continuum.score -> subset.cerebellum.data3$logistic.g3g4.tpms.continuum.score

as.numeric(tpms.mat[1,]) -> subset.cerebellum.data3$group3_metagene
as.numeric(tpms.mat[3,]) -> subset.cerebellum.data3$group4_metagene
as.numeric(tpms.mat[4,]) -> subset.cerebellum.data3$shh_metagene
as.numeric(tpms.mat[2,]) -> subset.cerebellum.data3$wnt_metagene
logistic.g3g4.tpms.continuum.score -> subset.cerebellum.data3$g3g4.score

# Plot violin plots for each metagenes
lu_gr4_violinplot_cluster.names <- VlnPlot(subset.cerebellum.data3, features = "group4_metagene", group.by = "cluster.names", pt.size = 0) + theme(legend.position = "none")
lu_gr3_violinplot_cluster.names <- VlnPlot(subset.cerebellum.data3, features = "group3_metagene" ,group.by = "cluster.names", pt.size = 0)+ theme(legend.position = "none")
lu_shh_violinplot_cluster.names <- VlnPlot(subset.cerebellum.data3, features = "shh_metagene" ,group.by = "cluster.names", pt.size = 0)+ theme(legend.position = "none")
lu_wnt_violinplot_cluster.names <- VlnPlot(subset.cerebellum.data3, features = "wnt_metagene" ,group.by = "cluster.names", pt.size = 0)+ theme(legend.position = "none")

ggsave(lu_gr4_violinplot_cluster.names, width = 10, height = 11, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP_TCP/VP_Lu_Group4Projection.png")
ggsave(lu_gr3_violinplot_cluster.names, width = 10, height = 11, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP_TCP/VP_Group3Projection.png")
ggsave(lu_shh_violinplot_cluster.names, width = 10, height = 11, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP_TCP/VP_ShhProjection.png")
ggsave(lu_wnt_violinplot_cluster.names, width = 10, height = 11, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP_TCP/VP_WntProjection.png")

grid_lu_vp_projection <- plot_grid(lu_gr3_violinplot_cluster.names,lu_gr4_violinplot_cluster.names,
                                         lu_shh_violinplot_cluster.names,lu_wnt_violinplot_cluster.names, labels=c("f", "g","h","i"), ncol = 2, nrow = 2)
ggsave(grid_lu_vp_projection, height = 12, width = 16, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Grid_VP_Projection.png") 

# Draw some dimplots that show the clusters and the metagene and the g3g4 
lu.dimplot.cluster.names <- DimPlot(object = subset.cerebellum.data3, group.by = "cluster.names", label = T) + theme(legend.title = element_text(size=14), 
                                                                                                                     legend.text = element_text(size=14))
lu_gr4_featureplot <- FeaturePlot(object = subset.cerebellum.data3,  "group4_metagene", cols = c("grey","green"), min.cutoff = 0.5)
lu_gr3_featureplot <- FeaturePlot(object = subset.cerebellum.data3, "group3_metagene", cols = c("grey","yellow"), min.cutoff = 0.5)
lu_shh_featureplot <- FeaturePlot(object = subset.cerebellum.data3, "shh_metagene", cols = c("grey","red"),min.cutoff=0.5) 
lu_wnt_featureplot <- FeaturePlot(object = subset.cerebellum.data3, "wnt_metagene", cols = c("grey","blue"), min.cutoff=0.5)

library(gridExtra)
grid.arrange(lu.dimplot.cluster.names,
             lu_gr4_featureplot,
             lu_gr3_featureplot,
             lu_shh_featureplot,
             lu_wnt_featureplot,
             nrow = 3
) -> lu.dimplot.all

library(cowplot)
plot_grid(lu_gr3_featureplot,
          lu_gr4_featureplot,
          lu_shh_featureplot,
          lu_wnt_featureplot,
          nrow = 2, labels = c("b","c","d","e")
) -> lu.dimplot.fp

plot_grid(lu.dimplot.cluster.names,
          lu.dimplot.fp,
          nrow = 2, 
          labels = c("a"," ")) -> lu.dimplot.all

plot_grid(lu.dimplot.all,grid_lu_vp_projection) -> final.lu.dimplot.all

ggsave(lu.dimplot.all, height = 14, width = 12, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Grid_Lu_Projection.png") 

ggsave(final.lu.dimplot.all, height=14,width=22,file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Grid_Lu_Projection.VPFP.png")
ggsave(lu_gr4_featureplot, width = 10, height = 11, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Lu_Group4Projection.png")
ggsave(lu_gr3_featureplot, width = 10, height = 11, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Lu_Group3Projection.png")
ggsave(lu_shh_featureplot, width = 10, height = 11, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Lu_ShhProjection.png")
ggsave(lu_wnt_featureplot, width = 10, height = 11, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Lu_WntProjection.png")
ggsave(lu.dimplot.cluster.names, width = 10, height = 11, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Lu_DimplotProjection.png")
ggsave(lu.dimplot.all, width = 12, height = 11, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Dimplot_All_Lu_Projection.png")

########## Trajectory analysis ###########
library(dplyr)
library(Seurat)
library(patchwork)
library(R.utils)
library(ggplot2)
library(monocle3)
library(ggplot2)

subset.cerebellum.data3 <- readRDS(file="~/SeuratProject/Lu data analysis/subset.cerebellum.data3.rds")

cds_lu3<- as.cell_data_set(subset.cerebellum.data3)

cds_lu3@rowRanges@elementMetadata@listData[["gene_short_name"]] <- rownames(subset.cerebellum.data3[["RNA"]])

# Preprocess CDS data
cds_lu3 <- preprocess_cds(cds_lu3, num_dim = 10)

# Align CDS data
cds_lu3 <- align_cds(cds_lu3)

# Reduce data dimension
cds_lu3 <- reduce_dimension(cds_lu3)

# Cluster cells
cds_lu3 <- cluster_cells(cds_lu3)

# Plot before trajectory
lu.before.trajectory <- plot_cells(cds_lu3, show_trajectory_graph = FALSE,
                                   color_cells_by = "cluster", label_groups_by_cluster = TRUE, group_label_size = 4, force(T)) +
  theme(legend.position = "right")

ggsave(lu.before.trajectory, height = 7, width = 9, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Trajectory_Lu_Before_Trajectory.png")

# See partition
plot_cells(cds_lu3, color_cells_by = "partition")

# Plot learn graph
cds_lu3 <- learn_graph(cds_lu3, use_partition = F)

# Plot order graph
cds_lu3 <- order_cells(cds_lu3)

# Plot clustering after trajectory (uses partition)

lu.after.trajectory <- plot_cells(cds_lu3,
                                  color_cells_by = 'cluster',
                                  label_groups_by_cluster = FALSE,
                                  label_branch_points = FALSE,
                                  label_roots = FALSE,
                                  label_leaves = FALSE,
)  + theme(legend.position = "right")


ggsave(lu.after.trajectory, height = 7, width = 9, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Trajectory_Lu_After_Trajectory.png")

# Lu trajectory
lu.clusters.trajectory <- plot_cells(cds_lu3,
                                     color_cells_by = 'cluster.names',
                                     label_groups_by_cluster = FALSE,
                                     label_branch_points = FALSE,
                                     label_roots = FALSE,
                                     label_leaves = FALSE,
                                     group_label_size = 4
) + theme(legend.position = "right", legend.title = element_text(size=14), 
                                             legend.text = element_text(size=14))

ggsave(lu.clusters.trajectory, height = 7, width = 9, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Trajectory_Lu.Clusters.Trajectory.png")


# Pseudotime
Lu_Pseudotime_Trajectory <- plot_cells(cds_lu3,
                                       color_cells_by = 'pseudotime',
                                       label_groups_by_cluster = FALSE,
                                       label_branch_points = FALSE,
                                       label_roots = FALSE,
                                       label_leaves = FALSE) + theme(legend.title = element_text(size=14), 
                                                                     legend.text = element_text(size=14))

ggsave(Lu_Pseudotime_Trajectory, height = 7, width = 9, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Trajectory_Lu_Pseudotime.png")

# plot_cells to visualize marker genes expression
# lu.genes
lu.genes <- c("PLP1", "CAPS", "CLDN11", "RGS5", "HBB", "OLIG1","CLDN5", "MS4A7","NEUROD2", "CXCL12","C1QC","NTF3","EOMES",
              "RSPO3","LMX1A","OTX2","GAP43","RAB26","MGP","ATOH1","RFC3","LHX5","PAX2","RORA","PCP4","CTNNB1","SOX11","HNRNPH1","NES","SOX2")

# 01NSC marker genes c("HES5","NES","SOX2","SLC1A3","SOX9","TTYH1","CXCR4","LY6H")
lu.01NSC.genes <- c("NES","SOX2")
lu_01NSC_genes <- plot_cells(cds_lu3,
                             genes=lu.01NSC.genes,
                             label_cell_groups=FALSE,
                             show_trajectory_graph=FALSE)

# Set the plot title
plot_title <- "01NSC gene markers"

# Add the title to the plot
plotnsc <- lu_01NSC_genes +
  ggtitle(plot_title) +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

ggsave(plotnsc, height = 7, width = 9, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/MarkerGenes_01NSC.png")

# 02TCP marker genes c("SOX11","HNRNPH1","CTNNB1","KIF5C","RPS4Y1","HMGB2","RASGEF1B","EIF5A","PAX6","KI67")
# Lu: TCP is enriched with HNRNPH1 and SOX11 and distinct from NSC, GCP and UBC lineage cells 
# note: TCPs give rise to GCPs (ATOH1+) and UBCs (EOMES+, Eomesodermin). 
# HNRNPH1+ cells that are colabelled with EOMES and PAX6 was detected in the RL transitional zone, 
# wherein PAX6+ give rise to GCPs and UBCs -> potential lineage trajectory from TCPs to UBCs through PAX6+ intermediates.
lu.02TCP.genes <- c("SOX11","HNRNPH1","CTNNB1")
lu_02TCP_genes <- plot_cells(cds_lu3,
                             genes=lu.02TCP.genes,
                             label_cell_groups=FALSE,
                             show_trajectory_graph=FALSE)

# Set the plot title
plot_title <- "02TCP gene markers"

# Add the title to the plot
plottcp <- lu_02TCP_genes +
  ggtitle(plot_title) +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

ggsave(plotnsc, height = 7, width = 9, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/MarkerGenes_02TCP.png")

# 06GCP_pro
# other not so expressed markers "RFC3","ATOH1","MGP","GAP43","RAB26", "HNRNPH1","SOX11","CTNNB1"
lu.06GCP_pro.genes <- c("ATOH1","RFC3")

lu_06GCP_pro_genes <- plot_cells(cds_lu3,
                                 genes=lu.06GCP_pro.genes,
                                 label_cell_groups=FALSE,
                                 show_trajectory_graph=FALSE)

# Set the plot title
plot_title <- "06GCP_pro gene markers"

# Add the title to the plot
plotgcppro <- lu_06GCP_pro_genes +
  ggtitle(plot_title) +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

ggsave(plotgcppro, height = 7, width = 9, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/MarkerGenes_06GCP_pro.png")

# 07GCP1 marker genes
# other not so expressed markers "GAP43","RAB26", "HNRNPH1","SOX11","CTNNB1"
lu.07GCP1.genes <- c("ATOH1","MGP","RAB26")

lu_07GCP1_genes <- plot_cells(cds_lu3,
                              genes=lu.07GCP1.genes,
                              label_cell_groups=FALSE,
                              show_trajectory_graph=FALSE)

# Set the plot title
plot_title <- "07GCP1 gene markers"

# Add the title to the plot
plotgcp1 <- lu_07GCP1_genes +
  ggtitle(plot_title) +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

ggsave(plotgcp1, height = 7, width = 9, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/MarkerGenes_07GCP1.png")

# 08GCP2 marker genes
lu.08GCP2.genes <- c("ATOH1","MGP","RAB26")

lu_08GCP2_genes <- plot_cells(cds_lu3,
                              genes=lu.08GCP2.genes,
                              label_cell_groups=FALSE,
                              show_trajectory_graph=FALSE)

# Set the plot title
plot_title <- "08GCP2 gene markers"

# Add the title to the plot
plotgcp2 <- lu_08GCP2_genes +
  ggtitle(plot_title) +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

ggsave(plotgcp2, height = 7, width = 9, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/MarkerGenes_08GCP2.png")

# 09Granule
# other markers "NEUROD2", "HNRNPH1","SOX11","CTNNB1"
lu.09Granule.genes <- c("GAP43","NEUROD2")

lu_09Granule_genes <- plot_cells(cds_lu3,
                                 genes=lu.09Granule.genes,
                                 label_cell_groups=FALSE,
                                 show_trajectory_graph=FALSE)

# Set the plot title
plot_title <- "09Granule gene markers"

# Add the title to the plot
plotgran <- lu_09Granule_genes +
  ggtitle(plot_title) +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

ggsave(plotgran, height = 7, width = 9, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/MarkerGenes_09Granule.png")

# 10UBC_PRO
# other markers "LMX1A","HNRNPH1","SOX11","CTNNB1","RFC3"
lu.10UBC_PRO.genes <- c("OTX2","RSPO3","EOMES")

lu_10UBC_PRO_genes <- plot_cells(cds_lu3,
                                 genes=lu.10UBC_PRO.genes,
                                 label_cell_groups=FALSE,
                                 show_trajectory_graph=FALSE)

# Set the plot title
plot_title <- "10UBC_PRO gene markers"

# Add the title to the plot
plotubcpro <- lu_10UBC_PRO_genes +
  ggtitle(plot_title) +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

ggsave(plotubcpro, height = 7, width = 9, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/MarkerGenes_10UBC_PRO.png")

# 11UBC
# other markers "OTX2","RSPO3","HNRNPH1","SOX11","CTNNB1"
lu.11UBC.genes <- c("OTX2", "RSPO3","EOMES","LMX1A")

lu_11UBC_genes <- plot_cells(cds_lu3,
                             genes=lu.11UBC.genes,
                             label_cell_groups=FALSE,
                             show_trajectory_graph=FALSE)

# Set the plot title
plot_title <- "11UBC gene markers"

# Add the title to the plot
plotubc <- lu_11UBC_genes +
  ggtitle(plot_title) +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

ggsave(plotubc, height = 7, width = 9, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/MarkerGenes_11UBC.png")

# 12UBCdiff
# other markers "HNRNPH1","SOX11","CTNNB1","GAP43"
lu.12UBCdiff.genes <- c("GAP43","NTF3","SOX11")

lu_12UBCdiff_genes <- plot_cells(cds_lu3,
                                 genes=lu.12UBCdiff.genes,
                                 label_cell_groups=FALSE,
                                 show_trajectory_graph=FALSE)

# Set the plot title
plot_title <- "12UBCdiff gene markers"

# Add the title to the plot
plotubcdiff <- lu_12UBCdiff_genes +
  ggtitle(plot_title) +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

ggsave(plotubcdiff, height = 7, width = 9, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/MarkerGenes_12UBCdiff.png")

# Save the final plots 
library(cowplot)
grid_lu_trajectory <- plot_grid(lu.clusters.trajectory,Lu_Pseudotime_Trajectory, labels=c("j","k"),nrow = 1)
ggsave(grid_lu_trajectory, height = 6, width = 16, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Grid_Lu_Trajectory.png") 

grid_lu_trajectory_markers <- plot_grid(plotnsc, plotgcppro, plotgcp1, plotgcp2, plotgran, plotubcpro, plotubc, labels=c("c", "d","e","f","g","h","i","j"), 
                                        nrow = 2)
ggsave(grid_lu_trajectory_markers, height = 6, width = 16, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Grid_Lu_Trajectory_Markers.png") 

grid_lu_trajectory_all <- plot_grid(grid_lu_trajectory,grid_lu_trajectory_markers,labels = c(" "," "),nrow=2,rel_heights=c(1,4),rel_widths = c(1,1))
ggsave(grid_lu_trajectory_all, height = 19, width = 13, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Grid_Lu_Trajectory_ALL.png") 

grid_lu_trajectory_all <- plot_grid(grid_lu_trajectory,grid_lu_trajectory_markers,labels = c(" "," "),nrow=2,rel_heights=c(1,3),rel_widths = c(1,1))
ggsave(grid_lu_trajectory_all, height = 19, width = 13, 
       file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Grid_Lu_Trajectory_ALL.png") 

# Project metagene to trajectory plot
meta.g4 <- plot_cells(cds_lu3,
                      color_cells_by = "group4_metagene",
                      label_cell_groups=FALSE,
                      label_leaves=FALSE,
                      label_branch_points=FALSE,
                      graph_label_size=1.5,
                      cell_stroke = 0.1,
                      scale_to_range = F, cell_size = 1, alpha = 0.1) + 
  scale_colour_gradient2(
    low = "white",
    mid = "white",
    high = "green",
    midpoint = 0.1,
    space = "Lab",
    na.value = "grey50",
    guide = "colourbar",
    aesthetics = "colour"
  )

meta.g3 <- plot_cells(cds_lu3,
                      color_cells_by = "group3_metagene",
                      label_cell_groups=FALSE,
                      label_leaves=FALSE,
                      label_branch_points=FALSE,
                      graph_label_size=1.5,
                      cell_stroke = 0,
                      scale_to_range = F, cell_size = 1, alpha = 0.1) + 
  scale_colour_gradient2(
    low = "white",
    mid = "white",
    high = "yellow",
    midpoint = 0.1,
    space = "Lab",
    na.value = "grey50",
    guide = "colourbar",
    aesthetics = "colour"
  )

meta.shh <- plot_cells(cds_lu3,
                       color_cells_by = "shh_metagene",
                       label_cell_groups=FALSE,
                       label_leaves=FALSE,
                       label_branch_points=FALSE,
                       graph_label_size=1.5,
                       cell_stroke = 0,
                       scale_to_range = F, cell_size = 1, alpha = 0.1) + 
  scale_colour_gradient2(
    low = "white",
    mid = "white",
    high = "red",
    midpoint = 0.1,
    space = "Lab",
    na.value = "grey50",
    guide = "colourbar",
    aesthetics = "colour"
  )

meta.wnt <- plot_cells(cds_lu3,
                       color_cells_by = "wnt_metagene",
                       label_cell_groups=FALSE,
                       label_leaves=FALSE,
                       label_branch_points=FALSE,
                       graph_label_size=1.5,
                       cell_stroke = 0,
                       scale_to_range = F, cell_size = 1, alpha = 0.1) + 
  scale_colour_gradient2(
    low = "white",
    mid = "white",
    high = "blue",
    midpoint = 0.1,
    space = "Lab",
    na.value = "grey50",
    guide = "colourbar",
    aesthetics = "colour"
  )

metagenes <- plot_grid(meta.g3,meta.g4,meta.shh,meta.wnt, labels=c("j", "k","l","m"), ncol = 2, nrow = 2)
ggsave(metagenes, height=14,width=22,file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Grid_Lu_Trajectory_Metagene.png")

all_projection <- plot_grid(final.lu.dimplot.all,metagenes, ncol = 2, nrow = 1, rel_widths = c(1.4,1))

ggsave(all_projection, height=15,width=33,file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Grid_Lu_Projection_And_Trajectory.VPFP.png")

dissplot <- plot_grid(final.lu.dimplot.all, grid_lu_trajectory, ncol = 1, nrow = 2, rel_heights = c(1.8,1))
ggsave(dissplot, height=19, width=15, file="~/SeuratProject/Lu data analysis/No UBCDiff_TCP/Dissplots/Dissplots1_Lu.png")
